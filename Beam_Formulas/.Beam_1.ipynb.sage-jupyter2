{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":169201664},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.2"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1563497171763,"exec_count":1,"id":"d64a8e","input":"import numpy as np\nimport matplotlib.pyplot as plt\nplt.ion()\n%matplotlib inline\nSAMPLE_SIZE = 9 # number of discrete points within beam to compute","kernel":"python3","pos":0,"start":1563497171737,"state":"done","type":"cell"}
{"cell_type":"code","end":1563497171790,"exec_count":2,"id":"b051b9","input":"# point load at any point on beam","kernel":"python3","pos":1,"start":1563497171773,"state":"done","type":"cell"}
{"cell_type":"code","end":1563497171856,"exec_count":3,"id":"b18e31","input":"# Given:\n#    span of beam, L\n#    magnitude of load, P\n#    distance from left end of beam to point of load, a\n#    distance from left end of beam to point of interest, x\n# Derive:\n#    distance from right end of beam to point of load, b\n#    reactions at ends of beams, R_1 and R_2\n#    bending at point of interest","kernel":"python3","pos":2,"start":1563497171813,"state":"done","type":"cell"}
{"cell_type":"code","end":1563497171891,"exec_count":4,"id":"99a4bd","input":"# M_max = Pab/L","kernel":"python3","pos":3,"start":1563497171881,"state":"done","type":"cell"}
{"cell_type":"code","end":1563497171952,"exec_count":5,"id":"bdeb68","input":"# Enter case values sans units at present\nP = 1 # kN\na = 1 # m\nL = 4 # m\n# Derive distance b\nb = L - a\n# Derive max moment\nM_max = (P*a*b)/L\nM_max","kernel":"python3","output":{"0":{"data":{"text/plain":"0.75"},"exec_count":5}},"pos":4,"start":1563497171908,"state":"done","type":"cell"}
{"cell_type":"code","end":1563497171994,"exec_count":6,"id":"11b867","input":"def moment_x(x, P, a, L):\n    \"\"\"\n    Determine moment for simple beam w/ concentrated load at any position x.\n\n    where\n    x = distance from left end of beam to point of interest\n    P = concentrated load\n    a = distance from left end of beam to point of load\n    L = length of span of beam\n\n    The function does not take or allign units. Units of x, a and L must be identical. \n\n    Returns value of moment at x in units_of_P * units_of_x\n    \"\"\"\n    b = L - a # derive b given a and L\n    if x >= 0 and x <= a:\n        M_x = (P*x*b)/L\n    elif x > a and x <= L:\n        M_x = (P*(L-x)*a)/L\n    else:\n        M_x = float('Nan')\n        print(\"Error: x cannot be less than 0 or greater than L which is {} in this case\".format(L))\n    return M_x","kernel":"python3","pos":5,"start":1563497171975,"state":"done","type":"cell"}
{"cell_type":"code","end":1563497172168,"exec_count":7,"id":"29540a","input":"position = np.linspace(0, L, SAMPLE_SIZE)\nposition","kernel":"python3","output":{"0":{"data":{"text/plain":"array([0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. ])"},"exec_count":7}},"pos":6,"start":1563497172010,"state":"done","type":"cell"}
{"cell_type":"code","end":1563497172278,"exec_count":8,"id":"e9d445","input":"moment_x(position[int(SAMPLE_SIZE/2)], P, a, L)","kernel":"python3","output":{"0":{"data":{"text/plain":"0.5"},"exec_count":8}},"pos":7,"start":1563497172218,"state":"done","type":"cell"}
{"end":1563497172303,"exec_count":9,"id":"55a26d","input":"moment_array = np.zeros(SAMPLE_SIZE)\nfor i in range(SAMPLE_SIZE):\n    moment_array[i] = moment_x(position[i], P, a, L)\nmoment_array","kernel":"python3","output":{"0":{"data":{"text/plain":"array([0.   , 0.375, 0.75 , 0.625, 0.5  , 0.375, 0.25 , 0.125, 0.   ])"},"exec_count":9}},"pos":8,"start":1563497172292,"state":"done","type":"cell"}
{"end":1563499642941,"exec_count":18,"id":"f316cb","input":"from matplotlib.widgets import Cursor\nax = plt.plot(position, moment_array)\nplt.grid(b=True, which='both', axis='both')\nplt.xlabel('x label')\nplt.ylabel('y label')\nplt.title('Moment Diagram')\n# plt.legend()\n# cursor = Cursor(ax, useblit=True, color='red', linewidth=2)\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"1509f869ddbc6205e701b09783d5b0f16a364f4f","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":277,"width":387}}}},"pos":9,"start":1563499642360,"state":"done","type":"cell"}
{"id":"adcc0c","input":"","pos":10,"state":"done","type":"cell"}
{"id":0,"time":1563494951002,"type":"user"}
{"last_load":1563222927933,"type":"file"}