{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":102248448},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.2"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1563552565259,"exec_count":1,"id":"b051b9","input":"# Figure 8 from DA6 by American Wood Council, 2007\n# Revision History\n# 0.0 19-Jul-2019 E.Durham created initial notebook","kernel":"python3","pos":0,"start":1563552565249,"state":"done","type":"cell"}
{"cell_type":"code","end":1563552565284,"exec_count":2,"id":"b18e31","input":"# Given:\n#    span of beam, L\n#    magnitude of load, P\n#    distance from left end of beam to point of load, a\n#    distance from left end of beam to point of interest, x\n#    EI of member, use 1 if unknown\n# Derive:\n#    distance from right end of beam to point of load, b\n#    reactions at ends of beams, R_1 and R_2\n#    shear at points of interest\n#    bending at points of interest\n#    deflection at points of interest\n#    plot graphs of shear, moment and deflection","kernel":"python3","pos":1,"start":1563552565278,"state":"done","type":"cell"}
{"cell_type":"code","end":1563552565637,"exec_count":3,"id":"d64a8e","input":"import numpy as np\n\n# Pint Unit Library\nfrom pint import UnitRegistry\nunit = UnitRegistry()\nQ_ = unit.Quantity\nunit.default_format = '~' # ~ for unit abreviations, P for prettyprint, or both\n# Define symbols for common units\nm = unit.meter; mm = unit.millimeter; inch = unit.inch;\nkN = unit.kilonewton; kPa = unit.kilopascal; MPa = unit.megapascal; \npsi = unit.psi; ksi = unit.ksi\n\n# matplotlib\nimport matplotlib.pyplot as plt\nplt.ion()\n%matplotlib inline\nSAMPLE_SIZE = 99 # number of discrete points within beam to compute","kernel":"python3","pos":2,"start":1563552565307,"state":"done","type":"cell"}
{"cell_type":"code","end":1563552565674,"exec_count":4,"id":"bdeb68","input":"# Enter case values sans units at present\nP = 1.6 # kN\na = 1.3 # m\nL = 7.35 # m\nEI = 1 # kN*m**2\n# Derive distance b\nb = L - a\n# Calculate Reactions\nR_1 = (P*b)/L # reaction at left support\nR_2 = (P*a)/L # reaction at right support\n# Derive max moment\nM_max = (P*a*b)/L\nM_max","kernel":"python3","output":{"0":{"data":{"text/plain":"1.712108843537415"},"exec_count":4}},"pos":3,"start":1563552565665,"state":"done","type":"cell"}
{"cell_type":"code","end":1563552565762,"exec_count":6,"id":"11b867","input":"def moment_x(x, P, a, L):\n    \"\"\"\n    Determine moment for simple beam w/ concentrated load at any position x.\n\n    where\n    x = distance from left end of beam to point of interest\n    P = concentrated load\n    a = distance from left end of beam to point of load\n    L = length of span of beam\n\n    The function does not take or allign units. Units of x, a and L must be identical. \n\n    Returns value of moment at x in units_of_P * units_of_x\n    \"\"\"\n    b = L - a # derive b given a and L\n    if x >= 0 and x <= a:\n        M_x = (P*x*b)/L\n    elif x > a and x <= L:\n        M_x = (P*(L-x)*a)/L\n    else:\n        M_x = float('NaN')\n        print(\"Error: x cannot be less than 0 or greater than L which is {} in this case\".format(L))\n    return M_x","kernel":"python3","pos":5,"start":1563552565756,"state":"done","type":"cell"}
{"end":1563552565710,"exec_count":5,"id":"ca408b","input":"def shear_x(x, P, a, L):\n    \"\"\"\n    Determine shear for simple beam w/ concentrated load at any position x.\n    \n    where\n    x = distance from left end of beam to point of interest\n    P = concentrated load\n    a = distance from left end of beam to point of load\n    L = length of span of beam\n\n    The function does not take or allign units. Units of x, a and L must be identical. \n\n    Returns value of shear at x in units_of_P\n    \n    \"\"\"\n    b = L - a # derive b given a and L\n    if x >= 0 and x <= a:\n        V_x = (P*b)/L\n    elif x > a and x <= L:\n        V_x = -(P*a)/L\n    else:\n        V_x = float('NaN')\n        print(\"Error: x cannot be less than 0 or greater than L which is {} in this case\".format(L))\n    return V_x","kernel":"python3","pos":4,"start":1563552565696,"state":"done","type":"cell"}
{"end":1563552565800,"exec_count":7,"id":"42c1d6","input":"def deflection_x(x, P, a, L, EI=1):\n    \"\"\"\n    Determine deflection for simple beam w/ concentrated load at any position x.\n\n    where\n    x = distance from left end of beam to point of interest\n    P = concentrated load\n    a = distance from left end of beam to point of load\n    L = length of span of beam\n    EI = modulus of elasticity of material in units_of_P / units_of_L**2 times\n    second moment of area in units_of_L**4. Thus, EI is in units_of_P * units_of_L**2.\n    Default value for EI is 1 in which case values returned are overstated by actual value\n    of EI. That is, to determine deflection for a given EI, divide deflection here by\n    actual value of EI.\n\n    The function does not take or allign units. Units of x, a and L must be identical. \n\n    Returns value of deflection at x in units_of_L\n    \"\"\"\n    b = L - a # derive b given a and L\n    if x == a:\n        deflection_x = -(P*a**2*b**2)/(3*EI*L)\n    elif x >= 0 and x < a:\n        deflection_x = -((P*b*x)/(6*EI*L))*(L**2-b**2-x**2)\n    elif x > a and x <= L:\n        deflection_x = -((P*a*(L-x))/(6*EI*L))*(2*L*x-x**2-a**2)\n    else:\n        deflection_x = float('NaN')\n        print(\"Error: x cannot be less than 0 or greater than L which is {} in this case\".format(L))\n    return deflection_x","kernel":"python3","pos":6,"start":1563552565792,"state":"done","type":"cell"}
{"end":1563552565863,"exec_count":8,"id":"55a26d","input":"# create beam array and load with position, shear, moment and deflection values\nbeam = np.zeros((4, SAMPLE_SIZE))\nbeam[0, : ] = np.linspace(0, L, SAMPLE_SIZE) # position\nfor i in range(SAMPLE_SIZE):\n    beam[1, i] = shear_x(beam[0, i], P, a, L) # stuff shear values\n    beam[2, i] = moment_x(beam[0, i], P, a, L) # stuff moment values\n    beam[3, i] = deflection_x(beam[0, i], P, a, L, EI) # stuff deflection values\n# beam[0:]","kernel":"python3","pos":7,"start":1563552565860,"state":"done","type":"cell"}
{"end":1563552566436,"exec_count":9,"id":"ddc690","input":"# plot shear diagram\nax = plt.plot(beam[0, : ], beam[1, : ])\nplt.grid(b=True, which='both', axis='both')\nplt.xlabel('x label')\nplt.ylabel('y label')\nplt.title('Shear Diagram')\n# plt.legend()\n# cursor = Cursor(ax, useblit=True, color='red', linewidth=2)\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"0b6c85c31e4fe513d6a7746cdf182dcd75b69fd3","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":277,"width":395}}}},"pos":8,"start":1563552565893,"state":"done","type":"cell"}
{"end":1563552567160,"exec_count":10,"id":"f316cb","input":"# from matplotlib.widgets import Cursor\nbx = plt.plot(beam[0, : ], beam[2, : ])\nplt.grid(b=True, which='both', axis='both')\nplt.xlabel('x label')\nplt.ylabel('y label')\nplt.title('Moment Diagram')\n# plt.legend()\n# cursor = Cursor(ax, useblit=True, color='red', linewidth=2)\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"c9db4f40675e09fa8f190f8a9799edd02ce48f72","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":277,"width":393}}}},"pos":9,"start":1563552566458,"state":"done","type":"cell"}
{"end":1563552567684,"exec_count":11,"id":"adcc0c","input":"# plot deflection diagram\ncx = plt.plot(beam[0, : ], beam[3, : ])\nplt.grid(b=True, which='both', axis='both')\nplt.xlabel('x label')\nplt.ylabel('Units of L')\nplt.title('Deflection Diagram')\n# plt.legend()\nplt.show()","kernel":"python3","output":{"0":{"data":{"image/png":"57d08cb6a00efcdd5a06e4f009650ae295cf95ee","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":277,"width":386}}}},"pos":10,"start":1563552567189,"state":"done","type":"cell"}
{"id":0,"time":1563551561132,"type":"user"}
{"last_load":1563222927933,"type":"file"}