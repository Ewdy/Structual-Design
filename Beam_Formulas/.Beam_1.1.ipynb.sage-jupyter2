{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80912384},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1564054074583,"exec_count":1,"id":"deed89","input":"import numpy as np\n\n# Pint Unit Library\nfrom pint import UnitRegistry\nunit = UnitRegistry()\nQ_ = unit.Quantity\nunit.default_format = '~' # ~ for unit abreviations, P for prettyprint, or both\n# Define symbols for common units\n# Length\nm = unit.meter; mm = unit.millimeter; inch = unit.inch; foot = unit.foot;\n# Force\nN = unit.newton; kN = unit.kilonewton; lbf = unit.pound_force; kip = unit.kip\n# Pressure\nkPa = unit.kilopascal; MPa = unit.megapascal; psi = unit.psi; ksi = unit.ksi;\n# Mass\nkg = unit.kilogram; lbs = unit.pound;\n# Acceleration\ng_0 = unit.standard_gravity","kernel":"python3","metadata":{"editable":true,"jupyter":{"source_hidden":false}},"no_halt":true,"pos":2,"start":1564054074399,"state":"done","type":"cell"}
{"cell_type":"code","end":1564054075400,"exec_count":3,"id":"91119e","input":"# convert units of user variables to newton for force and millimetres for distance\ntry :\n    P.ito(N) # convert user point force to Newtons\n    a.ito(mm)\n    L.ito(mm)\n    SAMPLE_SIZE = int(SAMPLE_SIZE)\n    EI = (E*I).to(N*mm**2)\nexcept:\n    print('ERROR: The user entered values cannot be converted to expected units. Results below are highly suspect.')\n    print('Please, re-enter user values using accepted units and re-run notebook')\n# Derive distance b\nb = L - a\n# Calculate Reactions\nR_1 = (P*b)/L # reaction at left support\nR_2 = (P*a)/L # reaction at right support\n# Derive max moment\nM_max_value = str(round((P*a*b)/L,3))\nM_max_location = a\n# Derive max deflection\nD_max_value = (P*a*b*(a+2*b)*(3*a*(a+2*b))**0.5)/(27*EI*L)\nD_max_value = str(round(D_max_value, 3))\nD_max_location = ((a*(a+2*b))/3)**0.5 # ONLY when a > b\nD_max_location = str(round(D_max_location, 3))\n\ndef shear_x(x, P, a, L):\n    \"\"\"\n    Determine shear for simple beam w/ concentrated load at any position x.\n    \n    where\n    x = distance from left end of beam to point of interest\n    P = concentrated load\n    a = distance from left end of beam to point of load\n    L = length of span of beam\n\n    The function does not allign units. Units of x, a and L must be identical. \n\n    Returns value of shear at x in units_of_P\n    \n    \"\"\"\n    b = L - a # derive b given a and L\n    if x >= 0*x.units and x <= a:\n        V_x = (P*b)/L\n    elif x > a and x <= L:\n        V_x = -(P*a)/L\n    else:\n        V_x = float('NaN')\n        print(\"Error: x cannot be less than 0 or greater than L which is {} in this case\".format(L))\n    return V_x\n\ndef moment_x(x, P, a, L):\n    \"\"\"\n    Determine moment for simple beam w/ concentrated load at any position x.\n\n    where\n    x = distance from left end of beam to point of interest\n    P = concentrated load\n    a = distance from left end of beam to point of load\n    L = length of span of beam\n\n    The function does not allign units. Units of x, a and L must be identical. \n\n    Returns value of moment at x in units_of_P * units_of_x\n    \"\"\"\n    b = L - a # derive b given a and L\n    if x >= 0*x.units and x <= a:\n        M_x = (P*x*b)/L\n    elif x > a and x <= L:\n        M_x = (P*(L-x)*a)/L\n    else:\n        M_x = float('NaN')\n        print(\"Error: x cannot be less than 0 or greater than L which is {} in this case\".format(L))\n    return M_x\n\ndef deflection_x(x, P, a, L, EI=1):\n    \"\"\"\n    Determine deflection for simple beam w/ concentrated load at any position x.\n\n    where\n    x = distance from left end of beam to point of interest\n    P = concentrated load\n    a = distance from left end of beam to point of load\n    L = length of span of beam\n    EI = modulus of elasticity of material in units_of_P / units_of_L**2 times\n    second moment of area in units_of_L**4. Thus, EI is in units_of_P * units_of_L**2.\n    Default value for EI is 1 in which case values returned are overstated by actual value\n    of EI. That is, to determine deflection for a given EI, divide deflection here by\n    actual value of EI.\n\n    The function does not allign units. Units of x, a and L must be identical. \n\n    Returns value of deflection at x in units_of_L\n    \"\"\"\n    b = L - a # derive b given a and L\n    if x == a:\n        deflection_x = -(P*a**2*b**2)/(3*EI*L)\n    elif x >= 0*x.units and x < a:\n        deflection_x = -((P*b*x)/(6*EI*L))*(L**2-b**2-x**2)\n    elif x > a and x <= L:\n        deflection_x = -((P*a*(L-x))/(6*EI*L))*(2*L*x-x**2-a**2)\n    else:\n        deflection_x = float('NaN')\n        print(\"Error: x cannot be less than 0 or greater than L which is {} in this case\".format(L))\n    return deflection_x\n\n# create beam array and load with position, shear, moment and deflection values\nbeam = np.zeros((4, SAMPLE_SIZE))\nPOSITION = 0 # array row for position along the beam\nSHEAR = 1 # array row for shear along the beam\nMOMENT = 2\nDEFLECTION = 3\nbeam[POSITION, : ] = np.linspace(0, L.magnitude, SAMPLE_SIZE) # position\nfor i in range(SAMPLE_SIZE):\n    beam[SHEAR, i] = shear_x(beam[POSITION, i]*L.units, P, a, L).magnitude # stuff shear values\n    beam[MOMENT, i] = moment_x(beam[POSITION, i]*L.units, P, a, L).magnitude # stuff moment values\n    beam[DEFLECTION, i] = deflection_x(beam[POSITION, i]*L.units, P, a, L, EI).magnitude # stuff deflection values","kernel":"python3","metadata":{"editable":true,"jupyter":{"source_hidden":false}},"no_halt":true,"pos":3,"start":1564054074643,"state":"done","type":"cell"}
{"cell_type":"code","end":1564054076056,"exec_count":4,"id":"137b52","input":"# plot shear diagram with matplotlib\nimport matplotlib.pyplot as plt\nplt.ion()\n# %matplotlib inline\nax = plt.plot(beam[POSITION, : ], beam[SHEAR, : ])\nplt.grid(b=True, which='both', axis='both')\nplt.xlabel(str('X [' + str(L.units) + ']'))\nplt.ylabel(str('V [' + str(P.units) + ']'))\nplt.title('Shear Diagram')\n# plt.legend()\n# cursor = Cursor(ax, useblit=True, color='red', linewidth=2)\nplt.show()\nprint('Left Reaction = V_1 = {}'.format(round(R_1, 3)))\nprint('Right Reaction = -V_2 = {}'.format(round(R_2, 3)))","kernel":"python3","metadata":{"editable":false,"jupyter":{"source_hidden":true}},"no_halt":true,"output":{"0":{"data":{"image/png":"2a8e01afed3189d99c00d130a5ba4bbe559c9c85","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":277,"width":399}}},"1":{"name":"stdout","text":"Left Reaction = V_1 = 666.667 N\nRight Reaction = -V_2 = 333.333 N\n"}},"pos":8,"start":1564054075431,"state":"done","type":"cell"}
{"cell_type":"code","end":1564054076670,"exec_count":5,"id":"0b3681","input":"# from matplotlib.widgets import Cursor\nbx = plt.plot(beam[POSITION, : ], beam[MOMENT, : ])\nplt.grid(b=True, which='both', axis='both')\nplt.xlabel(str('X [' + str(L.units) + ']'))\nplt.ylabel(str('M [' + str(P.units * L.units) + ']'))\nplt.title('Moment Diagram')\n# plt.legend()\n# cursor = Cursor(ax, useblit=True, color='red', linewidth=2)\nplt.show()\nprint('Maximum moment at {} is {}'.format(M_max_location, M_max_value))","kernel":"python3","metadata":{"editable":false,"jupyter":{"source_hidden":true}},"no_halt":true,"output":{"0":{"data":{"image/png":"bbdc26ea9ea833e6c1ca16c1f8a8203e055cc92f","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":277,"width":410}}},"1":{"name":"stdout","text":"Maximum moment at 1000 mm is 666666.667 N * mm\n"}},"pos":9,"start":1564054076094,"state":"done","type":"cell"}
{"cell_type":"code","end":1564054077559,"exec_count":6,"id":"79a0ec","input":"# plot deflection diagram\ncx = plt.plot(beam[POSITION, : ], beam[DEFLECTION, : ])\nplt.grid(b=True, which='both', axis='both')\nplt.xlabel(str('X [' + str(L.units) + ']'))\nplt.ylabel('$\\Delta$'+ ' [' + str(L.units) + ']')\nplt.title('Deflection Diagram')\n# plt.legend()\nplt.show()\n# print('Maximum deflection at {} is {}'.format(D_max_location, D_max_value))\nD_index = beam[DEFLECTION, : ].argmin()\nD_value = beam[DEFLECTION, D_index]\nD_location = beam[POSITION, D_index]\n\nprint('Location of maximum deflection: {} mm'.format(round(D_location, 4)))\nprint('Value of maximum deflection: {} mm'.format(round(D_value, 4)))","kernel":"python3","metadata":{"editable":false,"jupyter":{"source_hidden":true}},"no_halt":true,"output":{"0":{"data":{"image/png":"dae14474ff8c7a52c6aa48b3e5cbe1613219aea5","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"image/png":{"height":277,"width":403}}},"1":{"name":"stdout","text":"Location of maximum deflection: 1367.7355 mm\nValue of maximum deflection: -16.6845 mm\n"}},"pos":10,"start":1564054076705,"state":"done","type":"cell"}
{"cell_type":"markdown","exec_count":1,"id":"3e566a","input":"Figure 8 from DA6 by American Wood Council, 2007\nRevision History\n1.2 25-Jul-2019 E.Durham added instructions and unit tests\n1.1 24-Jul-2019 E.Durham added test data\n0.0 19-Jul-2019 E.Durham created initial notebook","kernel":"python3","metadata":{"editable":false,"jupyter":{}},"no_halt":true,"pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","exec_count":2,"id":"abadd1","input":"Beam Case: Simply supported beam - concentrated load at any point\n\nWhen Given the following values:\n- span of beam, L in one of the listed length units\n- magnitude of load, P in one of the listed force units\n- distance from left end of beam to point of load, a in one of the listed length units\n- distance from left end of beam to point of interest, x in one of the listed length units\n- EI of member, use 1 * N * mm**2 if unknown; otherwise\n- E is Young's Modulus in one of the listed pressure units\n- I is Second Moment of Area in one of the listed length units to the 4th power\n- number of samples along beam, SAMPLE_SIZE in integer\n\nThis notebook will derive the following:\n- distance from right end of beam to point of load, b\n- reactions at ends of beams, R_1 and R_2\n- plot graphs of shear, moment and deflection\n- and list maximum values for each\n\nAcceptable units:\n- Length: m, mm, inch, foot\n- Force: N, kN, lbf, kip\n- Pressure: kPa, MPa, psi, ksi","kernel":"python3","metadata":{"editable":false,"jupyter":{}},"no_halt":true,"pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","exec_count":7,"id":"49f289","input":"End of Results\n\nTest and ancillary data is below in hidden cells.\n\nTo view test data:\n- Select cells below\n- Then click \"Edit\" on the menu\n- Then click \"Toggle Hide Input of Cells\"","kernel":"python3","metadata":{"editable":false},"no_halt":true,"pos":10.5,"state":"done","type":"cell"}
{"cell_type":"raw","id":"21e97d","input":"# STAAD Model\nSTAAD SPACE\nSTART JOB INFORMATION\nENGINEER DATE 24-Jul-19\nEND JOB INFORMATION\nINPUT WIDTH 79\nUNIT METER KN\nJOINT COORDINATES\n1 0 0 0; 2 0 0 4;\nMEMBER INCIDENCES\n1 1 2;\nDEFINE MATERIAL START\nISOTROPIC STEEL\nE 2.05e+008\nPOISSON 0.3\nDENSITY 76.8195\nALPHA 1.2e-005\nDAMP 0.03\nTYPE STEEL\nSTRENGTH FY 253200 FU 407800 RY 1.5 RT 1.2\nISOTROPIC 350W\nE 2e+008\nPOISSON 0.3\nDENSITY 76.9822\nALPHA 1.17e-005\nG 7.7e+007\nTYPE STEEL\nSTRENGTH FY 350000 FU 450000 RY 1 RT 1\nEND DEFINE MATERIAL\nMEMBER PROPERTY CANADIAN\n1 TABLE ST HSSP48x4.8HA\nCONSTANTS\nMATERIAL 350W ALL\nSUPPORTS\n1 2 PINNED\nMEMBER RELEASE\n1 START MP 0.999\nLOAD 1 LOADTYPE None  TITLE LOAD CASE 1\nMEMBER LOAD\n1 CON GY -1 1\nPERFORM ANALYSIS\nFINISH","metadata":{"editable":false,"jupyter":{"source_hidden":true}},"pos":10.875,"state":"done","type":"cell"}
{"cell_type":"raw","id":"2e6b04","input":"# STAAD Results\nV_max_pos = 0.75 kN at 0.00 mm\nV_max_neg = -0.25 kN at 4000.00 mm\nM_max = -0.75 kN-m at 1000 mm\nD_max = -32.127 mm at 1763 mm","metadata":{"editable":false,"jupyter":{"source_hidden":true}},"pos":10.9375,"state":"done","type":"cell"}
{"cell_type":"raw","id":"c7b801","input":"# Notebook test results\nMaximum moment at 1000 mm is 750000.0 N * mm\nbeam[DEFLECTION, : ].min() = D_max = -32.126661002047484 mm\nbeam[SHEAR, : ].max() = V_max_pos = 750.0 newton\nbeam[SHEAR, : ].min() = V_max_neg = -250.0 newton","metadata":{"editable":false,"jupyter":{"source_hidden":true}},"pos":10.96875,"state":"done","type":"cell"}
{"cell_type":"raw","id":"e729b2","input":"# Begin of Test and ancillary data\n# Test Data\nP = 1000 * N\na = 1000 * mm\nL = 4000 * mm\nE = 200000 * MPa\nI = 0.145*10**6 * mm**4","metadata":{"editable":false,"jupyter":{"outputs_hidden":false,"source_hidden":true}},"pos":10.75,"state":"done","type":"cell"}
{"end":1564054074614,"exec_count":2,"id":"518e6a","input":"# ======= ========= ========= ========= ========= ========= ========= =========\n# USER: Enter case values using units listed above\n# force; Example: P = 1000 * N\nP = 1000 * N\n# distance from left end of beam to point of load; Example a = 1000 * mm\na = 1000 * mm\n# distance b from point a to right end of beam is derived\n# span of beam; Example L = 3000 * mm\nL = 3000 * mm\nEI = 1 * N*mm**2 # default, otherwise enter E and I below\n# Young's Modulus for material; Example E = 200000 * MPa\nE = 200000 * MPa\n# Second Moment of Area for shape; Example I = 0.145*10**6 * mm**4\nI = 0.145*10**6 * mm**4 \nSAMPLE_SIZE = 999 # number of points within beam to compute, 999 is common\n# USER: Enter case values above. Altering anything below can be harmful.\n# ======= ========= ========= ========= ========= ========= ========= =========","kernel":"python3","no_halt":true,"pos":2.5,"start":1564054074604,"state":"done","type":"cell"}
{"end":1564054077808,"exec_count":7,"id":"dcdb15","input":"D_index = beam[DEFLECTION, : ].argmin()\nD_value = beam[DEFLECTION, D_index]\nD_location = beam[POSITION, D_index]\nprint(D_index)\nprint(D_value)\nprint(D_location)","kernel":"python3","metadata":{"editable":false,"jupyter":{"source_hidden":true}},"no_halt":true,"output":{"0":{"name":"stdout","text":"455\n-16.68447176766191\n1367.7354709418837\n"}},"pos":11.984375,"scrolled":true,"start":1564054077794,"state":"done","type":"cell"}
{"end":1564054077834,"exec_count":8,"id":"347f99","input":"F_y = 350*MPa\nF_y.ito(kN/m**2)\nE.to(kN/m**2)","kernel":"python3","metadata":{"editable":false,"jupyter":{"source_hidden":true}},"no_halt":true,"output":{"0":{"data":{"text/html":"200000000.0 kilonewton/meter<sup>2</sup>","text/latex":"$200000000.0\\ \\frac{\\mathrm{kilonewton}}{\\mathrm{meter}^{2}}$","text/plain":"<Quantity(200000000.0, 'kilonewton / meter ** 2')>"},"exec_count":8}},"pos":13,"scrolled":true,"start":1564054077822,"state":"done","type":"cell"}
{"end":1564054077902,"exec_count":9,"id":"790001","input":"steel_density = 7850 * kg/m**3\nsteel_density_for_STAAD = steel_density * g_0\nsteel_density_for_STAAD.ito(kN/m**3)\nsteel_density_for_STAAD","kernel":"python3","metadata":{"editable":false,"jupyter":{"source_hidden":true}},"no_halt":true,"output":{"0":{"data":{"text/html":"76.9822025 kilonewton/meter<sup>3</sup>","text/latex":"$76.9822025\\ \\frac{\\mathrm{kilonewton}}{\\mathrm{meter}^{3}}$","text/plain":"<Quantity(76.9822025, 'kilonewton / meter ** 3')>"},"exec_count":9}},"pos":14,"scrolled":true,"start":1564054077847,"state":"done","type":"cell"}
{"end":1564054077928,"exec_count":10,"id":"732061","input":"steel_shear_modulus = 77_000*MPa\nsteel_shear_modulus.to(kN/m**2)","kernel":"python3","metadata":{"editable":false,"jupyter":{"source_hidden":true}},"no_halt":true,"output":{"0":{"data":{"text/html":"77000000.0 kilonewton/meter<sup>2</sup>","text/latex":"$77000000.0\\ \\frac{\\mathrm{kilonewton}}{\\mathrm{meter}^{2}}$","text/plain":"<Quantity(77000000.0, 'kilonewton / meter ** 2')>"},"exec_count":10}},"pos":15,"scrolled":true,"start":1564054077917,"state":"done","type":"cell"}
{"id":0,"time":1564127918964,"type":"user"}
{"last_load":1563961256481,"type":"file"}